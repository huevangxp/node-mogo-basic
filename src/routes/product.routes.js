const controller = require('../controllers/product.controller');

module.exports = (app) => {
/**
 * @swagger
 * /product:
 *   post:
 *     summary: Create a new product
 *     tags: [Products]
 *     description: Create a new product in the API.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: The name of the product.
 *               price:
 *                 type: number
 *                 description: The price of the product.
 *               status:
 *                 type: string
 *                 description: The status of the product (e.g., "available", "out of stock").
 *               details:
 *                 type: string
 *                 description: Additional details about the product.
 *             example:
 *               name: "Product A"
 *               price: 19.99
 *               status: "available"
 *               details: "This is a great product."
 *     responses:
 *       201:
 *         description: Product created successfully.
 *         content:
 *           application/json:
 *             example:
 *               _id: "60b63f3b750c7c001c87a654"  # This will be an actual ID generated by MongoDB
 *               name: "Product A"
 *               price: 19.99
 *               status: "available"
 *               details: "This is a great product."
 *       400:
 *         description: Bad request - Invalid input data.
 *       500:
 *         description: Internal server error - Something went wrong on the server.
 */
    app.post('/product', controller.create);
/**
 * @swagger
 * /products:
 *   get:
 *     summary: Get a list of products
 *     tags: [Products]
 *     description: Retrieve a list of products from the API.
 *     responses:
 *       200:
 *         description: Successful response with a list of products.
 *         content:
 *           application/json:
 *             example:
 *               - product_name: "Product A"
 *                 price: 19.99
 *               - product_name: "Product B"
 *                 price: 29.99
 *       401:
 *         description: Unauthorized - Authentication required.
 *       500:
 *         description: Internal server error - Something went wrong on the server.
 */
    app.get('/products', controller.selectAll);
/**
 * @swagger
 * /product/{id}:
 *   get:
 *     summary: Get a single product by ID
 *     tags: [Products]
 *     description: Retrieve a product by its unique ID from the API.
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The unique ID of the product to retrieve.
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Successful response with the requested product.
 *         content:
 *           application/json:
 *             example:
 *               product_name: "Product A"
 *               price: 19.99
 *       401:
 *         description: Unauthorized - Authentication required to access this endpoint.
 *       500:
 *         description: Internal server error - Something went wrong on the server.
 */
    app.get('/product/:id', controller.selectById);
/**
 * @swagger
 * /product/{id}:
 *   delete:
 *     summary: Delete a product by ID
 *     tags: [Products]
 *     description: Delete a product by its unique ID from the API.
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The unique ID of the product to delete.
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Product deleted successfully.
 *       401:
 *         description: Unauthorized - Authentication required to access this endpoint.
 *       404:
 *         description: Not found - Product with the specified ID does not exist.
 *       500:
 *         description: Internal server error - Something went wrong on the server.
 */
    app.delete('/product/:id', controller.delete);
/**
 * @swagger
 * /product/{id}:
 *   put:
 *     summary: Update a product by ID
 *     tags: [Products]
 *     description: Update an existing product by its unique ID in the API.
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The unique ID of the product to update.
 *         schema:
 *           type: string  # Assuming the ID is a string, update the type accordingly
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: The updated name of the product.
 *               price:
 *                 type: number
 *                 description: The updated price of the product.
 *               status:
 *                 type: string
 *                 description: The updated status of the product (e.g., "available", "out of stock").
 *               details:
 *                 type: string
 *                 description: Updated additional details about the product.
 *             example:
 *               name: "Updated Product A"
 *               price: 29.99
 *               status: "updated"
 *               details: "This is an updated product."
 *     responses:
 *       200:
 *         description: Product updated successfully.
 *         content:
 *           application/json:
 *             example:
 *               _id: "60b63f3b750c7c001c87a654"  # This will be an actual ID generated by MongoDB
 *               name: "Updated Product A"
 *               price: 29.99
 *               status: "updated"
 *               details: "This is an updated product."
 *       400:
 *         description: Bad request - Invalid input data.
 *       404:
 *         description: Not found - Product with the specified ID does not exist.
 *       500:
 *         description: Internal server error - Something went wrong on the server.
 */

    app.put('/product/:id', controller.update);
}